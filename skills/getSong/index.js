const regSong = /—Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏/i;
const regSongQuerySplitter = /\,|üéµ|üé∂|by/i;
const lyric = require("lyric-get");

const getSongText = {
    callName: '—Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏',
    action: (bot, message, TOKENS) => {
        const lyricQuery = message.text.replace(regSong, '');
        const lyricData = {
            author: lyricQuery.split(regSongQuerySplitter, 2)[0].trim(),
            songName: lyricQuery.split(regSongQuerySplitter, 2)[1].trim(),
        };
        lyric.get(lyricData.author, lyricData.songName, function (err, res) {
            if (err) {
                console.log(err);
                //retry and swap parametrs
                lyric.get(lyricData.songName, lyricData.author, function (err, res) {
                    if (err) {
                        console.log(err);
                        bot.send(`—è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏, –º–æ–∂–µ—Ç —ç—Ç–æ —Ç—ã –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—à–∏–±—Å—è? \n –ò–±–æ –æ—Ç–≤–µ—Ç –∏–∑ –ö–∏–±–µ—Ä–ª–∞–π—Ñ ${err}`, message.peer_id).catch(
                            function (e) {
                                console.log(e);
                            }
                        );
                    }
                    else {
                        bot.send(`–ø—Ä–∏—à–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ —è —Å–ø—Ä–∞–≤–∏–ª—Å—è \n \n ${res}`, message.peer_id).catch(
                            function (e) {
                                console.log(e);
                            }
                        );
                    }
                });

            }
            else {
                bot.send(`–¥–µ—Ä–∂–∏ \n \n ${res}`, message.peer_id).catch(
                    function (e) {
                        console.log(e);
                    }
                );
            }
        });
    }
}

module.exports = getSongText;